before_script:
  # Install JFrog CLI
  - curl -fL https://install-cli.jfrog.io | sh
  # Configure Artifactory instance with JFrog CLI
  - jf config add --url=$JFROG_PLATFORM_URL --access-token=$JFROG_PAT
  - jf config show
  # Set the M2_HOME environment variable
  #- export M2_HOME=/usr/share/maven
  # Replace the repository name in the configuration.yml to the correct one.
  #- sed -i 's,MAVEN_REPO_KEY,'"$MAVEN_REPO_KEY"',g' configuration.yml
stages:
  - build:maven
  - build:docker
build:maven:
  stage: build:maven
  image: maven:latest
  script:
    # Config Maven
    - jf mvn-config
    # Run compile
    - jf mvn clean test-compile -Dcheckstyle.skip -DskipTests
    # Run Maven package
    - jf mvn package spring-boot:repackage -DskipTests -Dcheckstyle.skip
  artifacts:
    paths:
      - target/*.jar
build:docker:
  stage: build:docker
  image: docker:latest
  services:
    - docker:dind
  #variables:
  #  DOCKER_HOST: tcp://localhost:2375/
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  script:
    # Build Docker image
    - docker build . --file Dockerfile --build-arg='JAR_FILE=target/*.jar' --tag $ARTIFACTORY_DOCKER_REGISTRY/$DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_VERSION
    # Push Docker image
    - jf rt docker-push $ARTIFACTORY_DOCKER_REGISTRY/$DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_VERSION $DOCKER_REPOSITORY --build-name=$CI_PROJECT_NAME --build-number=$CI_JOB_ID
    # Collect the environment variables
    - jf rt bce $CI_PROJECT_NAME $CI_JOB_ID
    # Pass the build information to Artifactory
    - jf rt bp $CI_PROJECT_NAME $CI_JOB_ID
    # Scan published build with fail by default (true)
    - jf bs $CI_PROJECT_NAME $CI_JOB_ID
